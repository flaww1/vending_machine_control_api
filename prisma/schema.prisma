generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  number            Int            @id @default(autoincrement())
  first_name        String         @db.VarChar(255)
  last_name         String         @db.VarChar(255)
  password          String         @db.VarChar(255)
  email             String         @unique(map: "email") @db.VarChar(255)
  type              User_type
  registration_date DateTime       @db.DateTime(0)
  Feedback          Feedback[]
  Order             Order[]
  User_Machine      User_Machine[] @relation("User_Machine")
  Wishlist          Wishlist[]
}

model Machine {
  id                  Int                   @id @default(autoincrement())
  model               String                @db.VarChar(255)
  type                Machine_Types
  status              Machine_Status
  energy_mode         EnergyMode_Types
  location            String                @db.VarChar(255)
  admin               User                  @relation(fields: [admin_number], references: [number])
  // latitude            Float                 @db.Float
  // longitude           Float                 @db.Float
  EnergyMode          EnergyMode[]
  Machine_Maintenance Machine_Maintenance[]
  Order               Order[]
  Product             Product[]
  User_Machine        User_Machine[]        @relation("User_Machine")
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  description String       @db.VarChar(255)
  type        Product_Type
  price       Float        @db.Float
  machine     Machine      @relation(fields: [machine_id], references: [id])
  Feedback    Feedback[]
  Order       Order[]
}

model Shelf {
  id       Int      @id @default(autoincrement())
  number   Int      @db.Int
  machine  Machine  @relation(fields: [machine_id], references: [id])
  Product  Product? @relation(fields: [product_id], references: [id])
  quantity Int      @db.Int
}

model Product_Shelf {
  id       Int     @id @default(autoincrement())
  shelf    Shelf   @relation(fields: [shelf_id], references: [id])
  product  Product @relation(fields: [product_id], references: [id])
  quantity Int     @db.Int
}

model Stock {
  id       Int     @id @default(autoincrement())
  machine  Machine @relation(fields: [machine_id], references: [id])
  Product  Product @relation(fields: [product_id], references: [id])
  quantity Int     @db.Int
}

model Order {
  id      Int          @id @default(autoincrement())
  status  Order_Status
  date    DateTime     @db.DateTime(0)
  cost    Float        @db.Float
  user    User         @relation(fields: [user_number], references: [number])
  machine Machine      @relation(fields: [machine_id], references: [id])
  Product Product      @relation(fields: [product_id], references: [id])
}

model User_Machine {
  id         Int          @id @default(autoincrement())
  user       User         @relation(fields: [user_number], references: [number])
  machine    Machine      @relation(fields: [machine_id], references: [id])
  date       DateTime     @db.DateTime(0)
  EnergyMode EnergyMode[]
  Wishlist   Wishlist[]
  Shelf      Shelf[]
  Stock      Stock[]
}

model Feedback {
  id          Int             @id @default(autoincrement())
  title       String          @db.VarChar(255)
  description String          @db.VarChar(255)
  type        Feedback_Type
  status      Feedback_Status
  date        DateTime        @db.DateTime(0)
  user        User            @relation(fields: [user_number], references: [number])
}

model Feedback_Machine {
  id       Int      @id @default(autoincrement())
  feedback Feedback @relation(fields: [feedback_id], references: [id])
  machine  Machine  @relation(fields: [machine_id], references: [id])
}

model Feedback_Product {
  id       Int      @id @default(autoincrement())
  feedback Feedback @relation(fields: [feedback_id], references: [id])
  product  Product  @relation(fields: [product_id], references: [id])
}

model EnergyMode {
  id      Int              @id @default(autoincrement())
  type    EnergyMode_Types
  machine Machine          @relation(fields: [machine_id], references: [id])
}

model Provider_Product {
  id       Int      @id @default(autoincrement())
  provider Provider @relation(fields: [provider_id], references: [id])
  product  Product  @relation(fields: [product_id], references: [id])
}

model Restock {
  id       Int      @id @default(autoincrement())
  date     DateTime @db.DateTime(0)
  provider Provider @relation(fields: [provider_id], references: [id])
  product  Product  @relation(fields: [product_id], references: [id])
  quantity Int      @db.Int
}

model Machine_Maintenance {
  id       Int                          @id @default(autoincrement())
  type     Machine_Maintenance_Type
  user     User                         @relation(fields: [user_number], references: [number])
  priority Machine_Maintenance_Priority
  status   Machine_Maintenance_Status
  date     DateTime                     @db.DateTime(0)
  machine  Machine                      @relation(fields: [machine_id], references: [id])
}

model Wishlist {
  id      Int     @id @default(autoincrement())
  user    User    @relation(fields: [user_number], references: [number])
  product Product @relation(fields: [product_id], references: [id])
}

enum User_type {
  ADMINISTRATOR
  USER
  SUPPLIER
  MAINTENANCE
}

enum Machine_Types {
  COLD_DRINKS
  HEATED_DRINKS
  SNACKS
  OTHERS
}

enum Machine_Status {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum Feedback_Type {
  RECOMENDATION
  PRODUCT
  MACHINE
}

enum Feedback_Status {
  PENDING
  RESOLVED
}

enum Product_Type {
  COLD_DRINK
  HEATED_DRINK
  SNACK
  OTHER
}

enum Order_Status {
  PENDING
  COMPLETED
  CANCELED
}

enum EnergyMode_Types {
  ECO
  NORMAL
  MAX
}

enum Machine_Maintenance_Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Machine_Maintenance_Type {
  CLEANING
  REPAIR
  OTHER
}

enum Machine_Maintenance_Priority {
  LOW
  MEDIUM
  HIGH
}
