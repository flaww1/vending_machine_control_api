generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// USER
model User {
  userId             Int                  @id @default(autoincrement())
  first_name         String               @db.VarChar(255)
  last_name          String               @db.VarChar(255)
  password           String               @db.VarChar(255)
  email              String               @unique(map: "email") @db.VarChar(255)
  type               User_type
  registration_date  DateTime             @db.DateTime(0)
  isVerified         Boolean              @default(false)
  dFeedback          Feedback[]
  reservation_Cart   reservation_Cart[]
  Wishlist           Wishlist[]
  reservation        Reservation[]
  Notification       Notification[]
  Machine            Machine[]
  RestockRequest     RestockRequest[]
  MaintenanceRequest MaintenanceRequest[]

  @@index([userId], map: "userId")
}

model Provider {
  providerId         Int                  @id @default(autoincrement())
  type               Provider_type
  phone              String               @db.VarChar(20)
  Address            Address[]
  RestockRequest     RestockRequest[]
  MaintenanceRequest MaintenanceRequest[]

  @@index([providerId], map: "providerId")
}

model Address {
  addressId   Int      @id @default(autoincrement())
  street      String   @db.VarChar(255)
  country     String   @db.VarChar(50)
  city        String   @db.VarChar(50)
  latitude    Decimal  @db.Decimal(8, 6)
  longitude   Decimal  @db.Decimal(9, 6)
  postal_code String   @db.VarChar(10)
  nif         Int
  providerId  Int
  provider    Provider @relation(fields: [providerId], references: [providerId])

  @@index([providerId], map: "providerId")
}

model reservation_Cart {
  cartId       Int     @id @default(autoincrement())
  userId       Int
  user         User    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "reservation_Cart_ibfk_1")
  productId    Int
  product      Product @relation(fields: [productId], references: [productId], onDelete: Cascade, onUpdate: NoAction, map: "reservation_Cart_ibfk_2")
  index        Int
  quantity     Int
  machineId    Int
  machine      Machine @relation(fields: [machineId], references: [machineId], onDelete: Cascade, onUpdate: NoAction, map: "reservation_Cart_ibfk_3")
  Shelf        Shelf?  @relation(fields: [shelfShelfId], references: [shelfId])
  shelfShelfId Int?

  @@index([userId], map: "user")
  @@index([productId], map: "product")
  @@index([machineId], map: "machine")
}

model Machine {
  machineId   Int              @id @default(autoincrement())
  modelId     Int
  model       MachineModel     @relation(fields: [modelId], references: [modelId])
  type        Machine_Types
  status      Machine_Status
  energy_mode EnergyMode_Types
  location    String           @db.Text
  adminId     Int
  admin       User             @relation(fields: [adminId], references: [userId])
  // latitude            Float                 @db.Float
  // longitude           Float                 @db.Float

  MaintenanceRequest MaintenanceRequest[]
  Product            Product[]
  Shelf              Shelf[]
  reservation_Cart   reservation_Cart[]
  Feedback_Machine   Feedback_Machine[]
  RestockRequest     RestockRequest[]
  reservation        Reservation[]
}

model Product {
  productId   Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  image_uri   String       @db.VarChar(1000)
  description String       @db.VarChar(255)
  type        Product_Type
  price       Float        @db.Float

  Feedback         Feedback[]
  Product_Shelf    Product_Shelf[]
  reservation      Reservation[]
  reservation_Cart reservation_Cart[]
  RestockRequest   RestockRequest[]
  Wishlist         Wishlist[]
  Machine          Machine?           @relation(fields: [machineMachineId], references: [machineId])
  machineMachineId Int?
  Feedback_Product Feedback_Product[]

  @@index([name], map: "name")
  @@index([productId], map: "productId")
}

model Shelf {
  shelfId          Int                @id @default(autoincrement())
  machineId        Int
  Machine          Machine            @relation(fields: [machineId], references: [machineId])
  Product_Shelf    Product_Shelf[]
  reservation_Cart reservation_Cart[]
  reservation      Reservation[]

  @@index([machineId], map: "Machine")
}

model Product_Shelf {
  product_shelfId Int     @id @default(autoincrement())
  shelfId         Int
  shelf           Shelf   @relation(fields: [shelfId], references: [shelfId])
  productId       Int
  product         Product @relation(fields: [productId], references: [productId])
  quantity_inSlot Int

  @@index([shelfId], map: "shelf")
  @@index([productId], map: "product")
}

model MachineModel {
  modelId       Int       @id @default(autoincrement())
  model         String    @db.VarChar(255)
  shelfQuantity Int
  shelfCapacity Int
  Machine       Machine[]
}

model RestockRequest {
  restockId       Int            @id @default(autoincrement())
  machineId       Int
  Machine         Machine        @relation(fields: [machineId], references: [machineId])
  productId       Int
  Product         Product        @relation(fields: [productId], references: [productId])
  quantity        Int
  providerId      Int
  Provider        Provider       @relation(fields: [providerId], references: [providerId])
  adminId         Int
  Admin           User           @relation(fields: [adminId], references: [userId])
  status          Restock_Status
  arrival_date    DateTime       @db.DateTime(0)
  transport_price Float          @db.Float
  restock_price   Float          @db.Float
  date            DateTime       @db.DateTime(0)
  observations    String?        @db.VarChar(255)

  @@index([machineId], map: "machine")
  @@index([productId], map: "product")
  @@index([providerId], map: "provider")
  @@index([adminId], map: "admin")
}

model MaintenanceRequest {
  maintenanceId Int                          @id @default(autoincrement())
  type          Machine_Maintenance_Type
  priority      Machine_Maintenance_Priority
  status        Machine_Maintenance_Status
  date          DateTime                     @db.DateTime(0)
  machineId     Int
  machine       Machine                      @relation(fields: [machineId], references: [machineId])
  adminId       Int
  providerId    Int
  provider      Provider                     @relation(fields: [providerId], references: [providerId])
  admin         User                         @relation(fields: [adminId], references: [userId])
  description   String                       @db.VarChar(255)

  @@index([machineId], map: "machine")
  @@index([providerId], map: "provider")
  @@index([adminId], map: "admin")
}

model Feedback {
  feedbackId       Int                @id @default(autoincrement())
  title            String             @db.VarChar(255)
  description      String             @db.VarChar(255)
  type             Feedback_Type
  status           Feedback_Status
  date             DateTime           @db.DateTime(0)
  userId           Int
  User             User               @relation(fields: [userId], references: [userId])
  Feedback_Machine Feedback_Machine[]
  Feedback_Product Feedback_Product[]
  Product          Product?           @relation(fields: [productId], references: [productId])
  productId        Int?

  @@index([userId], map: "user")
}

model Feedback_Machine {
  feedback_machineId Int      @id @default(autoincrement())
  feedbackId         Int
  feedback           Feedback @relation(fields: [feedbackId], references: [feedbackId])
  machineId          Int
  machine            Machine  @relation(fields: [machineId], references: [machineId])

  @@index([machineId], map: "machine")
  @@index([feedbackId], map: "feedback")
}

model Feedback_Product {
  feedback_productId Int      @id @default(autoincrement())
  feedbackId         Int
  feedback           Feedback @relation(fields: [feedbackId], references: [feedbackId])
  productId          Int
  product            Product  @relation(fields: [productId], references: [productId])

  @@index([productId], map: "product")
  @@index([feedbackId], map: "feedback")
}

model Wishlist {
  wishlistId Int     @id @default(autoincrement())
  userId     Int
  user       User    @relation(fields: [userId], references: [userId])
  productId  Int
  product    Product @relation(fields: [productId], references: [productId])

  @@index([userId], map: "user")
  @@index([productId], map: "product")
}

model Notification {
  notificationId Int                @id @default(autoincrement())
  user           Int
  title          String             @db.VarChar(255)
  reservationId  Int?
  content        String             @db.VarChar(255)
  dismissed      Boolean            @default(false)
  timestamp      DateTime           @db.DateTime(0)
  scope          Notification_scope
  userId         Int
  User           User               @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "Notification_ibfk_1")
  Reservation    Reservation?       @relation(fields: [reservationId], references: [reservationId], onDelete: Cascade, onUpdate: NoAction, map: "Notification_ibfk_2")

  @@index([reservationId], map: "reservation")
}

model Reservation {
  reservationId         Int                    @id @default(autoincrement())
  status                reservation_Status
  userId                Int
  user                  User                   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "reservation_ibfk_1")
  total_price           Decimal                @db.Decimal(10, 2)
  quantity              Int
  productId             Int
  product               Product                @relation(fields: [productId], references: [productId])
  machineId             Int
  machine               Machine                @relation(fields: [machineId], references: [machineId])
  shelfId               Int
  shelf                 Shelf                  @relation(fields: [shelfId], references: [shelfId])
  reservationCodeStatus ReservationCode_Status @default(UNUSED)
  reservationCode       String                 @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  paymentStatus         Payment_Status         @default(PENDING)
  paymentMethod         Payment_Method
  Notification          Notification[]
}

enum User_type {
  ADMINISTRATOR
  USER
}

enum Provider_type {
  SUPPLIER
  MAINTENANCE
}

enum Machine_Types {
  COLD_DRINKS
  HEATED_DRINKS
  SNACKS
  OTHERS
}

enum Machine_Status {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum Feedback_Type {
  RECOMENDATION
  PRODUCT
  MACHINE
}

enum Feedback_Status {
  PENDING
  RESOLVED
}

enum Product_Type {
  COLD_DRINK
  HEATED_DRINK
  SNACK
  OTHER
}

enum reservation_Status {
  AWAITING_PAYMENT
  COMPLETED
  CANCELED
  REFUNDED
}

enum Payment_Status {
  PENDING
  COMPLETED
  CANCELED
}

enum EnergyMode_Types {
  ECO
  NORMAL
  MAX
}

enum Machine_Maintenance_Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Machine_Maintenance_Type {
  CLEANING
  REPAIR
  OTHER
}

enum Machine_Maintenance_Priority {
  LOW
  MEDIUM
  HIGH
}

enum Restock_Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Notification_scope {
  AWAITING_PAYMENT
  PROCESSING
  DROPPING
  COMPLETE
  FAILURE
  CANCELED
}

enum Payment_Method {
  MACHINE
  APP
}

enum ReservationCode_Status {
  USED
  UNUSED
}
